const path = require("path");
const webpack = require("webpack");

/** @type {import('@vue/cli-service').ProjectOptions} */
module.exports = {
    outputDir: "publish",
    productionSourceMap: false,
    parallel: false,
    configureWebpack: {
        optimization: {
            runtimeChunk: "single",
        },
        plugins: [
            new webpack.ContextReplacementPlugin(
                /moment[/\\]locale/,
                /en(-au|-ca)?$/
            ),
        ],
        cache:
            process.env.NODE_ENV === "development"
                ? {
                      type: "filesystem",
                      // could be unnecessary to configure these manually?
                      // unsure if these get pulled in automatically
                      buildDependencies: {
                          typescript: ["typescript", "tslib", "ts-loader"],
                          config: [__filename],
                          vue: ["@vue/", "vue-template-compiler"],
                      },
                  }
                : false,
        module: {
            rules: [
                {
                    resourceQuery: /raw/,
                    type: "asset/source",
                },
                {
                    resourceQuery: /resource/,
                    type: "asset/resource",
                },
                {
                    resourceQuery: /inline/,
                    type: "asset/inline",
                },
            ],
        },
        entry: {
            index: "./src/main.ts",
            //registerServiceWorker: "./src/registerServiceWorker.ts",
        },
    },
    pages: {
        index: {
            entry: "src/main.ts",
            template: "public/index.html",
            filename: "index.html",
            chunks: [
                "chunk-vendors",
                "chunk-common",
                "index",
                //"registerServiceWorker",
            ],
        },
    },
    chainWebpack: (config) => {
        config.resolve.alias
            .set("@c", path.resolve(__dirname, "src", "components"))
            .set("@v", path.resolve(__dirname, "src", "views"));
        //    .set("@r", path.resolve(__dirname, "chart-renderer", "src"));

        // cache-loader is deprecated but vue-cli still configures it
        config.module.rules.values().forEach((v) => {
            v.uses.delete("cache-loader");
        });

        config.plugin("fork-ts-checker").tap(([options]) => [
            {
                ...options,
                /** @type {import('fork-ts-checker-webpack-plugin/lib/typescript-reporter/TypeScriptReporterOptions').TypeScriptReporterOptions} */
                typescript: {
                    ...options.typescript,
                    // build: true,
                    context: path.resolve(__dirname, "src"),
                    configFile: path.resolve(__dirname, "src", "tsconfig.json"),
                },
            },
        ]);

        config.module
            .rule("ts")
            .uses.get("ts-loader")
            .tap(
                /** @type {import('ts-loader').Options} */ (options) => ({
                    ...options,
                    projectReferences: true,
                    context: path.resolve(__dirname, "src"),
                })
            );

        if (process.env.NODE_ENV === "development") {
            config.devtool("source-map");
            config.output.devtoolModuleFilenameTemplate(
                (
                    /** @type {import('webpack').DevtoolModuleFilenameTemplateInfo} */ info
                ) =>
                    info.resourcePath.match(/\.vue/) &&
                    (info.allLoaders.match(
                        /pitcher|templateLoader|css-loader/
                    ) ||
                        info.moduleId)
                        ? `webpack-generated:///${info.resourcePath}?${info.hash}`
                        : `webpack:///${path.normalize(info.resourcePath)}`
            );

            config.output.devtoolFallbackModuleFilenameTemplate(
                "webpack://fallback/[resource-path]?[hash]"
            );
        }
    },
    /*pwa: {
        name: "Appname",
        themeColor: "#005587",
        msTileColor: "#ffffff",
        iconPaths: {
            favicon32: "favicon-32x32.png",
            favicon16: "favicon-16x16.png",
            appleTouchIcon: "apple-touch-icon.png",
            msTileImage: "mstile-150x150.png",
        },
        workboxPluginMode: "InjectManifest",
        workboxOptions: {
            swSrc: "/src/service-worker.js",
            maximumFileSizeToCacheInBytes: 10000,
        },
    },*/
};
